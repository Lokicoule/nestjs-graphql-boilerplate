import { IEntityModel } from '@lib/fdo-database/mongodb/entity/entity.model';
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Address, AddressSchema } from '../address/address.entity';
import { Company, CompanySchema } from '../company/company.entity';

export interface IUser extends Omit<IEntityModel, '_id'> {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address: Address;
  company: Company;
}

/**
 * User Entity
 * Hint: don't use EntityModel as base class for the User entity
 * because the id field is filled with the cognito username and
 * not generated by mongodb.
 */
@Schema({ timestamps: true, _id: false })
export class User implements IUser {
  @Prop()
  public _id: string;

  @Prop()
  public readonly createdAt: Date;

  @Prop()
  public readonly updatedAt: Date;

  @Prop({ required: true, uppercase: true })
  public firstName: string;

  @Prop({ required: true, uppercase: true })
  public lastName: string;

  @Prop({ required: true, unique: true, lowercase: true })
  public email: string;

  @Prop({ required: true, lowercase: true })
  public phone: string;

  @Prop({
    type: AddressSchema,
  })
  public address: Address;

  @Prop({
    type: CompanySchema,
  })
  public company: Company;

  constructor(data: IUser) {
    this._id = data._id;
    this.createdAt = data.createdAt;
    this.updatedAt = data.updatedAt;
    this.firstName = data.firstName;
    this.lastName = data.lastName;
    this.email = data.email;
    this.phone = data.phone;
    this.address = data.address;
    this.company = data.company;
  }
}

export type UserDocument = User & Document;
export const UserSchema = SchemaFactory.createForClass(User);
